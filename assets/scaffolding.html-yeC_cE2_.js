import{_ as s,c as n,b as a,o as i}from"./app-Bn9GZJrW.js";const l={};function t(r,e){return i(),n("div",null,e[0]||(e[0]=[a(`<h1 id="scaffolding" tabindex="-1"><a class="header-anchor" href="#scaffolding"><span>Scaffolding</span></a></h1><p><em>Scaffolding is an automated process to generate a model&#39;s code and basic infrastructure. If you are adding a new model at the level of TaxonWorks &quot;Data&quot; cards, you&#39;ll start here.</em></p><p>Scaffolding is a <a href="https://guides.rubyonrails.org/command_line.html#rails-generate" target="_blank" rel="noopener noreferrer">well documented</a> Rails convention. In TaxonWorks we use the scaffolding process whenever we add a new <a href="/develop/Data/models">data model</a> that becomes the basis for a wide range of new features. This gives us the basic infrastucture to both see the class of data, and to populate TaxonWorks conventions in preparation for adding more advanced interfaces and utility, such as a TaxonWorks Task.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Scaffolding creates the code that will create the database table and the model that sits on top of it, builds basic views, and creates the various supporting conventions&#39; files (controllers, views, test files). It&#39;s a quick way to do a lot of basic housekeeping work.</p></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Within TaxonWorks scaffolding is now used infrequently. It is much more common to <code>generate</code> <a href="">a new Task</a>.</p></div><p>Here is a brief overview of a TaxonWorks flavoured scaffold, in this case extending our data model to include Organizations (this has already been done, with some important differences). Our intention here is to further draw attention to TaxonWorks-specific steps.</p><h2 id="using-generate-scaffold" tabindex="-1"><a class="header-anchor" href="#using-generate-scaffold"><span>Using <code>generate scaffold</code></span></a></h2><p>Run the commands within the TaxonWorks directory in a shell. See Rails docs for a full explation, <code>rails generate scaffold --help</code> is also very useful.</p><p><code>rails generate scaffold Organization name:text description:text address:text project:references created_by_id:integer updated_by_id:integer --no-helper-specs --no-routing-specs --no-view-specs --no-request-specs -fixture -p</code></p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Always start with the <code>-p</code> flag, for &quot;practice&quot;. This will display what will happen without actually creating the files. Run generate with this flag as many times as you need.</p></div><p>After file generation you&#39;ll make some edits.</p><h2 id="migration" tabindex="-1"><a class="header-anchor" href="#migration"><span>Migration</span></a></h2><p>Scaffolding creates a database migration that will create the databse table. This file is added to <code>db/migrate/</code>.</p><p>You&#39;ll need to add a couple things to the file that looks like <code>db/migrate/20241207211545_create_organization</code>.</p><p>On creation your file looks somethihng like this:</p><div class="language-Ruby line-numbers-mode" data-highlighter="prismjs" data-ext="Ruby" data-title="Ruby"><pre><code><span class="line">class CreateOrganizations &lt; ActiveRecord::Migration[7.2]</span>
<span class="line">  def change</span>
<span class="line">    create_table :organizations do |t|</span>
<span class="line">      t.text :name</span>
<span class="line">      t.text :description</span>
<span class="line">      t.text :address</span>
<span class="line">      t.references :project, null: false, foreign_key: true</span>
<span class="line">      t.integer :created_by_id</span>
<span class="line">      t.integer :updated_by_id</span>
<span class="line"></span>
<span class="line">      t.timestamps</span>
<span class="line">    end</span>
<span class="line">  end</span>
<span class="line">end</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>There are some TaxonWorks specific tweaks to make:</p><ul><li>Add <code>null: false</code> and <code>index: true</code> to the created/updated fields</li><li><em>After</em> the <code>create_table</code>foreign key references to User like <code>add_foreign_key :organizations, :users, column: :updated_by_id</code></li></ul><p>After these editions your file looks something like this:</p><div class="language-Ruby line-numbers-mode" data-highlighter="prismjs" data-ext="Ruby" data-title="Ruby"><pre><code><span class="line">class CreateOrganizations &lt; ActiveRecord::Migration[7.2]</span>
<span class="line">  def change</span>
<span class="line">    create_table :organizations do |t|</span>
<span class="line">      t.text :name</span>
<span class="line">      t.text :description</span>
<span class="line">      t.text :address</span>
<span class="line">      t.references :project, null: false, foreign_key: true</span>
<span class="line">      t.integer :created_by_id, null: false, index: true</span>
<span class="line">      t.integer :updated_by_id, null: false, index: true</span>
<span class="line"></span>
<span class="line">      t.timestamps</span>
<span class="line">    end</span>
<span class="line">  end</span>
<span class="line"></span>
<span class="line">  add_foreign_key :organizations, :users, column: :created_by_id</span>
<span class="line">  add_foreign_key :organizations, :users, column: :updated_by_id</span>
<span class="line"></span>
<span class="line">end</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To test you migration run it against the <code>test</code> database:</p><p><code>rake db:migrate RAILS_ENV=test</code></p><p>Refer to <a href="https://guides.rubyonrails.org/active_record_migrations.html" target="_blank" rel="noopener noreferrer">Rails migration documentation</a> for further options.</p><h2 id="routes" tabindex="-1"><a class="header-anchor" href="#routes"><span>Routes</span></a></h2><p>Within <code>config/routes/data.rb</code> find the <code>resource:</code> block for your new model (e.g. search for <code>organizations</code>) then:</p><ul><li>Ensure the <code>resources:</code> block is present if it wasn&#39;t scaffolded</li><li>Include <code>concerns [:data_routes]</code></li><li>Move the code block into alphabetic order within the file</li></ul><p>Your block should look like:</p><div class="language-Ruby line-numbers-mode" data-highlighter="prismjs" data-ext="Ruby" data-title="Ruby"><pre><code><span class="line">  resources :organizations do</span>
<span class="line">    concerns [:data_routes]</span>
<span class="line">  end</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="factory" tabindex="-1"><a class="header-anchor" href="#factory"><span>Factory</span></a></h2><p>See factory <a href="https://github.com/SpeciesFileGroup/taxonworks/blob/development/spec/factories/README.md" target="_blank" rel="noopener noreferrer">README.md</a>.</p><h2 id="model" tabindex="-1"><a class="header-anchor" href="#model"><span>Model</span></a></h2><p>In <code>app/models/organization.rb</code>:</p><ul><li>Document the models attributes with <code>@!attribute</code> statements, see any model for examples. Note that as implemented Organization in TaxonWorks is 1:1 with another schema.* Add Concerns (extensions) to the model. All data models require <code>Shared::IsData</code> <em>usually as the last concern</em><ul><li>If the model has a <code>project_id</code> (is project specific) this will look like:</li></ul></li></ul><div class="language-Ruby line-numbers-mode" data-highlighter="prismjs" data-ext="Ruby" data-title="Ruby"><pre><code><span class="line">  include Housekeeping</span>
<span class="line">  # ... others</span>
<span class="line">  include Shared::IsData</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><pre><code>* You&#39;ll need to remove \`belongs_to :project_id\` if present, it&#39;s convered in the \`Housekeeping\`
* If the model is community:
</code></pre><div class="language-Ruby line-numbers-mode" data-highlighter="prismjs" data-ext="Ruby" data-title="Ruby"><pre><code><span class="line">  include Housekeeping::Users</span>
<span class="line">  include Housekeeping::Timestamps</span>
<span class="line">  # ... others</span>
<span class="line">  include Shared::IsData</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>If the model as a <code>project_id</code> register it in the <code>MANIFEST</code> constant in <a href="https://github.com/SpeciesFileGroup/taxonworks/blob/development/app/models/project.rb" target="_blank" rel="noopener noreferrer"><code>app/models/project.rb</code></a></li><li>Add at least 1-2 model tests (e.g. in <code>spec/models/organization_spec.rb</code>)</li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>At this point when you restart the server you should see a clickable card on <code>Data</code></p></div><h2 id="config" tabindex="-1"><a class="header-anchor" href="#config"><span>Config</span></a></h2><ul><li>Register the model in <a href="https://github.com/SpeciesFileGroup/taxonworks/blob/development/config/interface/hub/data.yml" target="_blank" rel="noopener noreferrer"><code>config/interface/hub/data.yml</code></a>. See details therein.</li></ul><h2 id="controller" tabindex="-1"><a class="header-anchor" href="#controller"><span>Controller</span></a></h2><p>Controllers are at <code>app/controller/</code>, for example <code>app/controllers/organizations_controller.rb</code>. See the <code>otus_controller.rb</code> for example patterns.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>Rails has naming conventions for pluralization. Models are singular, controllers are plural.</p></div><ul><li>Add Concerns <ul><li>If the model has a <code>project_id</code>:</li></ul></li></ul><div class="language-Ruby line-numbers-mode" data-highlighter="prismjs" data-ext="Ruby" data-title="Ruby"><pre><code><span class="line">class OrganizationsController &lt; ApplicationController</span>
<span class="line">  include DataControllerConfiguration::ProjectDataControllerConfiguration</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>If it is community (without <code>project_id</code>):</li></ul><div class="language-Ruby line-numbers-mode" data-highlighter="prismjs" data-ext="Ruby" data-title="Ruby"><pre><code><span class="line">  include DataControllerConfiguration::SharedDataControllerConfiguration</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>Add the pagination <code>after_action</code> pattern if required</li><li>Update <code>def index</code> to stub in some variables for an html and json response (these become more sophisticated down the road): <ul><li>Use <code>@recent_objects</code> in the html response</li><li>Use <code>@organizations</code> (or the model name) in the json response</li><li>Together it will look something like this:</li></ul></li></ul><div class="language-Ruby line-numbers-mode" data-highlighter="prismjs" data-ext="Ruby" data-title="Ruby"><pre><code><span class="line">  def index</span>
<span class="line">    respond_to do |format|</span>
<span class="line">      format.html do</span>
<span class="line">        @recent_objects = Organization.where(project_id: sessions_current_project_id).order(updated_at: :desc).limit(10)</span>
<span class="line">        render &#39;/shared/data/all/index&#39;</span>
<span class="line">      end</span>
<span class="line">      format.json {</span>
<span class="line">        @sounds = Organization.where(project_id: sessions_current_project_id)</span>
<span class="line">          .page(params[:page])</span>
<span class="line">          .per(params[:per])</span>
<span class="line">      }</span>
<span class="line">    end</span>
<span class="line">  end</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Ensure <code>.permit()</code> calls permit writable attributes</li><li>Add an<code>autocomplete</code> action (method)</li><li>Add a<code>list</code> action</li></ul><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>At the point of updating the controller running the application and clicking through the model&#39;s card will raise errors on things missed or stubbed in error above.</p></div><h3 id="controller-tests" tabindex="-1"><a class="header-anchor" href="#controller-tests"><span>Controller tests</span></a></h3><p><em>We do not add new controller specs, but the generated specs are easily modified to work, so we typically modify them to follow an overall pattern, then leave them alone. The pattern has variously evolved, but generally it follows something like that below.</em></p><p>Add the logon to the spec:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">  before(:each) {</span>
<span class="line">    sign_in</span>
<span class="line">  }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Use the corresponding factory to provide valid attributes:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">  let(:valid_attributes) { strip_housekeeping_attributes(FactoryBot.build(:valid_organization).attributes) }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We don&#39;t use <code>invalid_attributes</code>.</p><p>Modify the <code>#index</code> call to reference @recent_objects:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">  describe &quot;GET #index&quot; do</span>
<span class="line">    it &quot;assigns organizations to @recent_objects&quot; do</span>
<span class="line">      o = Organization.create! valid_attributes</span>
<span class="line">      get :index, params: {}, session: valid_session</span>
<span class="line">      expect(assigns(:recent_objects)).to include(o)</span>
<span class="line">    end</span>
<span class="line">  end</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Add a <code>#list</code> spec:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">  describe &#39;GET list&#39; do</span>
<span class="line">    it &#39;with no other parameters, assigns a page of @organizations&#39; do</span>
<span class="line">      o = Organization.create! valid_attributes</span>
<span class="line">      get :list, params: {}, session: valid_session</span>
<span class="line">      expect(assigns(:organizations)).to include(o)</span>
<span class="line">    end</span>
<span class="line"></span>
<span class="line">    it &#39;renders the list template&#39; do</span>
<span class="line">      get :list, params: {}, session: valid_session</span>
<span class="line">      expect(response).to render_template(&#39;list&#39;)</span>
<span class="line">    end</span>
<span class="line">  end</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Supply invalid_attributes where needed (the model validation rules will help determiner invalid values)</li><li>Run the controller spec and correct as necessary.</li></ul><h2 id="views" tabindex="-1"><a class="header-anchor" href="#views"><span>Views</span></a></h2><p>Reference existing patterns in <code>app/views/otus/</code> for details.</p><ul><li>Delete <code>index.html.erb</code></li><li>Follow Rails conventions for <code>_form.html.erb</code>. See any other <code>_form.html.erb</code> for TaxonWorks conventions and markup. Replace the partials as needed (e.g. <code>/shared/errors</code>)</li><li>Ensure you have JSON responses for <code>show</code> and <code>index</code> actions <ul><li>Rename the <code>_organization.json.jbuilder</code> partial to <code>_attributes.json.jbuilder</code></li></ul></li><li>Most models can use an autocomplete, add <code>autocomplete.json.jbuilder</code>.</li><li>Update <code>show.html.erb</code> to use a shared view replacing everything with <code>&lt;%= render(partial: &#39;shared/data/project/show&#39;, locals: {object: @organization}) -%&gt;</code></li><li>Add <code>_attributes.html.erb</code> so that shared view can render attributes</li><li>Add a <code>list.html.erb</code></li></ul><h3 id="view-specs" tabindex="-1"><a class="header-anchor" href="#view-specs"><span>View specs</span></a></h3><p>We do not use view specs, remove if you missed applying the flag in the <code>generate scaffold</code> commnd.</p><h2 id="queries" tabindex="-1"><a class="header-anchor" href="#queries"><span>Queries</span></a></h2><ul><li>You may want/need to add a filter or autocomplete query for the model. See <a href="https://github.com/SpeciesFileGroup/taxonworks/blob/development/lib/queries/README.md" target="_blank" rel="noopener noreferrer">README.md</a></li></ul><h2 id="helpers" tabindex="-1"><a class="header-anchor" href="#helpers"><span>Helpers</span></a></h2><ul><li>There are some must-do here, see <a href="https://github.com/SpeciesFileGroup/taxonworks/blob/development/app/helpers/README.md" target="_blank" rel="noopener noreferrer">helper README</a></li></ul>`,72)]))}const d=s(l,[["render",t],["__file","scaffolding.html.vue"]]),c=JSON.parse('{"path":"/develop/Code/Features/scaffolding.html","title":"Scaffolding","lang":"en-US","frontmatter":{"sidebarPosition":5},"headers":[{"level":2,"title":"Using generate scaffold","slug":"using-generate-scaffold","link":"#using-generate-scaffold","children":[]},{"level":2,"title":"Migration","slug":"migration","link":"#migration","children":[]},{"level":2,"title":"Routes","slug":"routes","link":"#routes","children":[]},{"level":2,"title":"Factory","slug":"factory","link":"#factory","children":[]},{"level":2,"title":"Model","slug":"model","link":"#model","children":[]},{"level":2,"title":"Config","slug":"config","link":"#config","children":[]},{"level":2,"title":"Controller","slug":"controller","link":"#controller","children":[{"level":3,"title":"Controller tests","slug":"controller-tests","link":"#controller-tests","children":[]}]},{"level":2,"title":"Views","slug":"views","link":"#views","children":[{"level":3,"title":"View specs","slug":"view-specs","link":"#view-specs","children":[]}]},{"level":2,"title":"Queries","slug":"queries","link":"#queries","children":[]},{"level":2,"title":"Helpers","slug":"helpers","link":"#helpers","children":[]}],"git":{"updatedTime":1733972363000,"contributors":[{"name":"mjy","email":"diapriid@gmail.com","commits":2,"url":"https://github.com/mjy"}]},"filePathRelative":"develop/Code/Features/scaffolding.md"}');export{d as comp,c as data};
