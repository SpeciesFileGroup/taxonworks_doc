import{_ as n,c as s,b as a,o as i}from"./app-Bn9GZJrW.js";const l={};function o(t,e){return i(),s("div",null,e[0]||(e[0]=[a(`<h1 id="windows-10-with-wsl2" tabindex="-1"><a class="header-anchor" href="#windows-10-with-wsl2"><span>Windows 10 with WSL2</span></a></h1><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h2><p>Windows 10 now has Linux available natively via <code>WSL2</code> (<code>Windows Subsystem for Linux v2</code>). <code>WSL2</code> runs a real Linux kernel and is much faster than the first iteration, <code>WSL1</code>, however it is still noticeably slower than Linux installed on a &#39;bare metal&#39;.</p><p>Taxonworks can be developed using <code>WSL2</code> and Docker. This document describes to to set everything up starting with enabling <code>WSL2</code> on Windows 10.</p><h2 id="preparation" tabindex="-1"><a class="header-anchor" href="#preparation"><span>Preparation</span></a></h2><p>Note: The installation procedure changes with time while <code>WSL2</code> matures. This section describes installation procedure for Windows 10 October 2020 edition.</p><ul><li><p>Run all Windows updates to make sure you are at the latest Windows 10 version.</p></li><li><p>Install <code>Windows Terminal</code> (optional)</p><p>Windows Terminal is an Open Source project from Microsoft that provides a pretty nice terminal emulator. I would say the quality of it is approaching the quality of popular terminal emulators on Mac and Linux. It is highly configurabele and allows to run PowerShell, CMD, and Linux.</p><p>To install it, open <code>Windows Store</code> app and search for <code>Windows Terminal</code>.</p><p>To make Linux experience more convenient (for example starting from Linux home directory on Ubuntu, or using ligatures after installing <a href="https://github.com/tonsky/FiraCode" target="_blank" rel="noopener noreferrer">Fira Code</a>) you can modify <code>Windows Terminal</code> configuration (it is just a JSON text) similar to this <a href="win-term.json">example</a>.</p></li><li><p>Install <code>Visual Studio Code</code> (optional)</p><p>WSL2 does not have native support for graphical programs yet (it is planned). However Visual Studio Code, a popular code editor, supports a transparent &quot;bridge&quot; to Linux from WSL. You can download it at <code>https://code.visualstudio.com/download</code></p><p><code>VS Code</code> has several useful plugins that I would recommend to install:</p><ul><li>Ruby: for Ruby language support.</li><li>Ruby Solargraph: for adding &quot;code intelligence&quot; via Language Server for Ruby -- Solargraph gem.</li><li>WSL: for (almost) transparent work with WSL2 directories.</li><li>Containers: for working with code transparently (almost) via WSL and/or SSH</li><li>Docker: simplifies interacting with docker containers (needed only if Docker Desktop is also installed)</li></ul><p>Some of these plugins are installed on windows side, some on the WSL2 side. Usually hints from <code>VS Code</code> allow to make correct decision where to install what.</p></li></ul><h2 id="install-wsl2" tabindex="-1"><a class="header-anchor" href="#install-wsl2"><span>Install WSL2</span></a></h2><p>Open PowerShell as administrator (standalone or as Windows Terminal) and type the following commands:</p><ul><li><p>Enable WSL2</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>Enable Virtual Machine Platform</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Restart your computer.</p></li><li><p>Setup WSL v2 as default</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">wsl --set-default-version <span class="token number">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="wsl-troubleshooting" tabindex="-1"><a class="header-anchor" href="#wsl-troubleshooting"><span>WSL troubleshooting</span></a></h3><p>If something does not work, first open PowerShell and make sure you are running WSL v2, and now WSL v1</p><div class="language-PowerShell line-numbers-mode" data-highlighter="prismjs" data-ext="PowerShell" data-title="PowerShell"><pre><code><span class="line">wsl -l -v</span>
<span class="line"></span>
<span class="line">wsl -l -v</span>
<span class="line">  NAME                   STATE           VERSION</span>
<span class="line">* Ubuntu-20.04           Running         2</span>
<span class="line">  docker-desktop         Running         2</span>
<span class="line">  docker-desktop-data    Running         2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here the command shows that Ubuntu-20.04 is running correctly, is the default distribution (has *), and runs WSL version 2.</p><p>If you do have WSL2 installed, you will get report for every linux distribution you have if it is running correctly and what WSL version it has. If you have only WSL1 installed you will get an error message.</p><p>Removing Linux distribution can be either done usual way via uninstall GUI that Windows provides (Ubuntu distro should appear there like a &#39;normal&#39; app), or It can be done using PowerShell with <code>wslconfig</code> command</p><div class="language-PowerShell line-numbers-mode" data-highlighter="prismjs" data-ext="PowerShell" data-title="PowerShell"><pre><code><span class="line">wslconfig /l</span>
<span class="line">Windows Subsystem for Linux Distributions:</span>
<span class="line">Ubuntu-20.04 (Default)</span>
<span class="line">docker-desktop</span>
<span class="line">docker-desktop-data</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To change WSL from v1 to v2 for a distribution (for example for Ubuntu-20.04) using PowerShell</p><div class="language-PowerShell line-numbers-mode" data-highlighter="prismjs" data-ext="PowerShell" data-title="PowerShell"><pre><code><span class="line">wsl --set-version Ubuntu-20.04 2</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>To remove Ubuntu-20.04 the command would be:</p><div class="language-PowerShell line-numbers-mode" data-highlighter="prismjs" data-ext="PowerShell" data-title="PowerShell"><pre><code><span class="line">wslconfig /u Ubuntu-20.04</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="install-linux-distro" tabindex="-1"><a class="header-anchor" href="#install-linux-distro"><span>Install Linux Distro</span></a></h2><p>There are several Linux distros available for WSL2, in our example we use Ubuntu 20.04.</p><p>Go to <code>Microsoft Store</code> app, search for Ubuntu, install and launch it. You will see it appearing in a separate terminal this time. You can customize it right in the terminal, or you can close it, and reopen it in <code>Windows Terminal</code>, where it will appear now as an option.</p><p>Once Ubuntu 20.04 is installed, open it in the Windows Terminal, run:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> update</span>
<span class="line"><span class="token function">sudo</span> <span class="token function">apt</span> dist-upgrade</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="install-docker-desktop-for-windows-10" tabindex="-1"><a class="header-anchor" href="#install-docker-desktop-for-windows-10"><span>Install Docker Desktop for Windows 10</span></a></h2><p>Download installer for Docker Desktop from the <a href="https://docs.docker.com/docker-for-windows/install/" target="_blank" rel="noopener noreferrer">Docker Hub</a> and run the installation. Docker Desktop will also install hooks into WSL2, so you do not need to install Docker one more time on WSL2 Linux.</p><blockquote><p>Instructions below refer to running <code>docker compose</code>, but if you&#39;re running an older version of docker you may need to use <code>docker-compose</code> instead.</p></blockquote><p>Now open Linux in Windows Terminal or its native terminal and try to run <code>docker</code> or <code>docker compose</code> commands. If you get errors that tell you do not have enough privileges, run <code>sudo vim /etc/group</code> and check that your account is added to docker group. For example I set my account as <code>dimus</code> and the line about docker group looks like this for me:</p><div class="language-txt line-numbers-mode" data-highlighter="prismjs" data-ext="txt" data-title="txt"><pre><code><span class="line">...</span>
<span class="line">docker:x:1001:dimus</span>
<span class="line">...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You might need to relog or restart the machine to get docker permissions to work correctly.</p><h2 id="clone-the-taxonworks-source-code" tabindex="-1"><a class="header-anchor" href="#clone-the-taxonworks-source-code"><span>Clone the taxonworks source code</span></a></h2><p>Go to an appropriate directory in your Linux terminal and run</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> clone https://github.com/SpeciesFileGroup/taxonworks.git</span>
<span class="line"><span class="token builtin class-name">cd</span> taxonworks</span>
<span class="line"><span class="token function">docker</span> compose build</span>
<span class="line"><span class="token function">docker</span> compose up</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>browse to <code>127.0.0.1:3000</code> if you can see something similar to below in your terminal window:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">webpack_1  <span class="token operator">|</span> webpack: Compiled successfully.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>You should see the logon window. Minimally, you now need to <em>Create a user</em> or <em>Restore a database dump</em></p></li><li><p>Wait for a while if the logon window does not load not load quickly.</p></li><li><p>Use <code>ctrl-c</code> or <code>docker compose down</code> in another local terminal to shutdown</p></li></ul><h2 id="run-the-tests" tabindex="-1"><a class="header-anchor" href="#run-the-tests"><span>Run the tests</span></a></h2><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">docker</span> compose <span class="token builtin class-name">exec</span> run <span class="token function">bash</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>From the inside of the container run:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">rake db:migrate <span class="token assign-left variable">RAILS_ENV</span><span class="token operator">=</span>test</span>
<span class="line">rspec</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>On my laptop tests finished in 31 minute.</p><h2 id="setup-a-development-environment" tabindex="-1"><a class="header-anchor" href="#setup-a-development-environment"><span>Setup a development environment</span></a></h2><p>You can use Vim, Neovim, Emacs etc from inside of the terminal to develop taxonworks code.</p><p>If you prefer a graphical interface of Visual Studio code you can launch is by simply going inside of the taxonwork directory and running</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">code <span class="token builtin class-name">.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>VS Code will start a network bridge to WSL2 Linux behind the scene and will make it possible to develop and debug code. The terminal in the VS Code will also run Linux.</p>`,46)]))}const d=n(l,[["render",o],["__file","win_README.html.vue"]]),c=JSON.parse('{"path":"/develop/Install/Development/Docker/win_README.html","title":"Windows 10 with WSL2","lang":"en-US","frontmatter":{"sidebarPosition":3},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[]},{"level":2,"title":"Preparation","slug":"preparation","link":"#preparation","children":[]},{"level":2,"title":"Install WSL2","slug":"install-wsl2","link":"#install-wsl2","children":[{"level":3,"title":"WSL troubleshooting","slug":"wsl-troubleshooting","link":"#wsl-troubleshooting","children":[]}]},{"level":2,"title":"Install Linux Distro","slug":"install-linux-distro","link":"#install-linux-distro","children":[]},{"level":2,"title":"Install Docker Desktop for Windows 10","slug":"install-docker-desktop-for-windows-10","link":"#install-docker-desktop-for-windows-10","children":[]},{"level":2,"title":"Clone the taxonworks source code","slug":"clone-the-taxonworks-source-code","link":"#clone-the-taxonworks-source-code","children":[]},{"level":2,"title":"Run the tests","slug":"run-the-tests","link":"#run-the-tests","children":[]},{"level":2,"title":"Setup a development environment","slug":"setup-a-development-environment","link":"#setup-a-development-environment","children":[]}],"git":{"updatedTime":1730999918000,"contributors":[{"name":"mjy","email":"diapriid@gmail.com","commits":1,"url":"https://github.com/mjy"}]},"filePathRelative":"develop/Install/Development/Docker/win_README.md"}');export{d as comp,c as data};
